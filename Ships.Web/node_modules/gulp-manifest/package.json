{
  "name": "gulp-manifest",
  "version": "0.1.1",
  "description": "Generate HTML5 Cache Manifest files",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hillmanov/gulp-manifest.git"
  },
  "keywords": [
    "gulp",
    "gulpplugin",
    "html5",
    "manifest",
    "appcache"
  ],
  "author": {
    "name": "Scott Hillman"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {
    "event-stream": "^3.1.7",
    "mocha": "~1.16.2",
    "should": "~2.1.1",
    "gulp": "^3.9.0"
  },
  "dependencies": {
    "gulp-util": "~2.2.6",
    "minimatch": "~2.0.1",
    "slash": "^1.0.0",
    "through": "~2.3.4"
  },
  "bugs": {
    "url": "https://github.com/hillmanov/gulp-manifest/issues"
  },
  "homepage": "https://github.com/hillmanov/gulp-manifest",
  "readme": "# gulp-manifest\n> Generate HTML5 Cache Manifest files. Submitted by [Scott Hillman](https://github.com/hillmanov/).\n\nBig thanks to [Gunther Brunner](https://github.com/gunta/) for writing the [grunt-manifest](https://github.com/gunta/grunt-manifest) plugin. This plugin was heavily influenced by his great work.\n\nVisit the [HTML 5 Guide to AppCache](http://www.html5rocks.com/en/tutorials/appcache/beginner/) for more information on Cache Manifest files.\n\n## Usage\n\nFirst, install `gulp-manifest` as a dev dependency\n\n```shell\nnpm install gulp-manifest --save-dev\n```\n\n## API\n\n### Parameters\n\n### manifest(options)\n\nThis controls how this task (and its helpers) operate and should contain key:value pairs, see options below.\n\n#### options.prefix\nType: `String`\nDefault: `undefined`\n\nAdd a prefix to the file paths. Useful when your files are in a different URL than the page.\n\n#### options.suffix\nType: `String`  \nDefault: `undefined`  \n\nAdd a suffix to the file paths. Useful when your files have query string.\n\n#### options.filename\nType: `String`\nDefault: `'app.manifest'`\n\nSet name of the Cache Manifest file.\n\n#### options.cache\nType: `String` `Array`\nDefault: `undefined`\n\nAdds manually a string to the **CACHE** section. Needed when you have cache buster for example.\n\n#### options.exclude\nType: `String` `Array`\nDefault: `undefined`\n\nExclude specific files from the Cache Manifest file.\n\n#### options.network\nType: `String` `Array`\nDefault: `'*'` (By default, an online whitelist wildcard flag is added)\n\nAdds a string to the **NETWORK** section.\n\nSee [here](http://diveintohtml5.info/offline.html#network) for more information.\n\n#### options.fallback\nType: `String` `Array`\nDefault: `undefined`\n\nAdds a string to the **FALLBACK** section.\n\nSee [here](http://diveintohtml5.info/offline.html#fallback) for more information.\n\n#### options.preferOnline\nType: `Boolean`\nDefault: `undefined`\n\nAdds a string to the **SETTINGS** section, specifically the cache mode flag of the ```prefer-online``` state.\n\nSee [here](http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#concept-appcache-mode-prefer-online) for more information.\n\n#### options.timestamp\nType: `Boolean`\nDefault: `true`\n\nAdds a timestamp as a comment for easy versioning.\n\nNote: timestamp will invalidate application cache whenever cache manifest is rebuilt, even if contents of files in `src` have not changed.\n\n#### options.hash\nType: `Boolean`\nDefault: `false`\n\nAdds a sha256 hash of all `src` files (actual contents) as a comment.\n\nThis will ensure that application cache invalidates whenever actual file contents change (it's recommented to set `timestamp` to `false` when `hash` is used).\n\n### Usage Example\n\n\n    gulp.task('manifest', function(){\n      gulp.src(['build/*'], { base: './' })\n        .pipe(manifest({\n          hash: true,\n          preferOnline: true,\n          network: ['*'],\n          filename: 'app.manifest',\n          exclude: 'app.manifest'\n         }))\n        .pipe(gulp.dest('build'));\n    });\n\n\n### Output example\n\n```\n  CACHE MANIFEST\n\n  CACHE:\n  js/app.js\n  css/style\n  css/style.css\n  js/zepto.min.js\n  js/script.js\n  some_files/index.html\n  some_files/about.html\n\n  NETWORK:\n  *\n\n  # hash: 76f0ef591f999871e1dbdf6d5064d1276d80846feeef6b556f74ad87b44ca16a\n```\n\nYou do need to be fully aware of standard browser caching.\nIf the files in **CACHE** are in the network cache, they won't actually update,\nsince the network cache will spit back the same file to the application cache.\nTherefore, it's recommended to add a hash to the filenames's, akin to rails or yeoman. See [here](http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/) why query strings are not recommended.\n\n### Composition of paths\n\nSometimes your assets are served from different source directories. To route these correctly the `gulp.src.base` option can be used to [define a glob's base path](https://github.com/gulpjs/gulp/blob/master/docs/API.md#optionsbase). Later multiple streams can be composed with [merge-stream](https://github.com/grncdr/merge-stream), so that one single manifest file is created from them\n\n```javascript\nvar path = require('path');\nvar mergeStream = require('merge-stream');\n\nvar config = {\n  app: './app',\n  tmp: './tmp'\n};\n\nmergeStream(\n  gulp.src([\n    path.join(config.app + '*.html'),\n    path.join(config.app + 'assets/*.{png,svg,jpg}'),\n    path.join(config.app + 'js/*.js')\n  ], {\n    base: config.app\n  }),\n  gulp.src([\n  \tpath.join(config.tmp + 'css/*.css')\n  ], {\n    base: config.tmp\n  })\n);\n.pipe(plugins.manifest({\n  hash: true,\n  preferOnline: false,\n  network: ['*'],\n  filename: 'appcache.manifest'\n}))\n.pipe(gulp.dest(config.tmp));\n```\n\nfor the given file tree\n\n```\n├── app\n│   ├── assets\n│   │   ├── cover.png\n│   │   └── logo.svg\n│   ├── index.html\n│   ├── js\n│   │   └── script.js\n│   └── scss\n│       └── style.scss\n└── tmp\n    └── css\n        └── style.css\n```\n\nwill result in\n\n```\nindex.html\nassets/cover.png\nassets/logo.svg\njs/script.js\ncss/style.css\n```\n\nSometimes you might want to alter the way paths are passed to the plugin. The correct way will be to provide options to `gulp.src` so that it generates correct paths.\n\nSay, you have a single folder named `public`, which is the top-level directory that's served to the browser. In the same directory, you have the `css`, `js` and `asset` files under different directories, along with the `html` files.\n\n```\npublic/\n├── assets\n│   ├── cover.png\n│   └── logo.png\n├── css\n│   └── style.css\n├── js\n│   └── app.js\n└── index.html\n```\n",
  "_id": "gulp-manifest@0.1.1",
  "_shasum": "68a801a5a15c12f7f3f1d34082070b534df9f717",
  "_from": "gulp-manifest@0.1.1",
  "_resolved": "https://registry.npmjs.org/gulp-manifest/-/gulp-manifest-0.1.1.tgz"
}
