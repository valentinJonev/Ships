{
  "name": "gulp-ng-config",
  "version": "1.2.1",
  "description": "AngularJS configuration generator for a module of constants",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "keywords": [
    "gulp",
    "grunt",
    "config",
    "constant",
    "angular",
    "angularjs",
    "ng",
    "gulpfriendly",
    "gulpplugin"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ajwhite/gulp-ng-config.git"
  },
  "author": {
    "name": "Atticus White"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ajwhite/gulp-ng-config/issues"
  },
  "homepage": "https://github.com/ajwhite/gulp-ng-config",
  "dependencies": {
    "gulp-util": "^3.0.0",
    "lodash": "^3.0.1",
    "through2": "^1.1.1",
    "js-yaml": "3.2.7"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "chai-spies": "^0.5.1",
    "event-stream": "^3.3.0",
    "gulp": "^3.8.7",
    "gulp-jscs": "^1.3.1",
    "gulp-jshint": "^1.8.4",
    "gulp-mocha": "^1.1.0",
    "jshint-stylish": "^0.4.0",
    "mocha": "^1.21.4",
    "vinyl": "^0.4.3"
  },
  "readme": "#gulp-ng-config\n\n[![License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![NPM version](http://img.shields.io/npm/v/gulp-ng-config.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![NPM version](http://img.shields.io/npm/dm/gulp-ng-config.svg?style=flat)](https://npmjs.org/package/gulp-ng-config)\n[![Build Status](http://img.shields.io/travis/ajwhite/gulp-ng-config.svg?style=flat)](http://travis-ci.org/ajwhite/gulp-ng-config)\n[![Dependency Status](http://img.shields.io/gemnasium/ajwhite/gulp-ng-config.svg?style=flat)](https://gemnasium.com/ajwhite/gulp-ng-config)\n\nIt's often useful to generate a file of constants, usually as environment variables, for your Angular apps.\nThis Gulp plugin will allow you to provide an object of properties and will generate an Angular module of constants.\n\n## To Install:\n`npm install gulp-ng-config`\n\n## How it works\nIt's pretty simple:\n`gulpNgConfig(moduleName)`\n\n\n## Example Usage\nWe start with our task. Our source file is a JSON file containing our configuration. We will pipe this through `gulpNgConfig` and out will come an angular module of constants.\n```javascript\ngulp.task('test', function () {\n  gulp.src('configFile.json')\n  .pipe(gulpNgConfig('myApp.config'))\n  .pipe(gulp.dest('.'))\n});\n```\nAssume that `configFile.json` contains:\n```json\n{\n  \"string\": \"my string\",\n  \"integer\": 12345,\n  \"object\": {\"one\": 2, \"three\": [\"four\"]},\n  \"array\": [\"one\", 2, {\"three\": \"four\"}, [5, \"six\"]]\n}\n```\nRunning `gulp test` will take `configFile.json` and produce `configFile.js` with the following content:\n\n```js\nangular.module('myApp.config', [])\n.constant('string', \"my string\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]})\n.constant('array', [\"one\",2,{\"three\":\"four\"},[5,\"six\"]]);\n```\nWe now can include this configuration module in our main app and access the constants\n```js\nangular.module('myApp', ['myApp.config']).run(function (string) {\n  console.log(\"The string constant!\", string) // outputs \"my string\"\n});\n```\n\n\n## Configuration\nCurrently there are a few configurable options to control the output of your configuration file:\n- [options.environment](#options.environment)\n- [options.constants](#options.constants)\n- [options.createModule](#options.createModule)\n- [options.wrap](#options.wrap)\n- [options.parser](#options.parser)\n\n### <a id=\"options.environment\"></a>options.environment\nType: `String` Optional\n\nIf your configuration contains multiple environments, you can supply the key you want the plugin to load from your configuration file.\n\nExample `config.json` file with multiple environments:\n```json\n{\n  \"local\": {\n    \"EnvironmentConfig\": {\n      \"api\": \"http://localhost/\"\n    }\n  },\n  \"production\": {\n    \"EnvironmentConfig\": {\n      \"api\": \"https://api.production.com/\"\n    }\n  }\n}\n```\n\nUsage of the plugin:\n```js\ngulpNgConfig('myApp.config', {\n  environment: 'production'\n})\n```\n\nExpected output:\n```js\nangular.module('myApp.config', [])\n.contant('EnvironmentConfig', {\"api\": \"https://api.production.com/\"});\n```\n\n### <a id=\"options.constants\"></a>options.constants\nType: `Object` Optional\n\nYou can also override properties from your json file or add more by including them in the gulp tasks:\n```javascript\ngulpNgConfig('myApp.config', {\n  constants: {\n    string: 'overridden',\n    random: 'value'\n  }\n});\n```\nGenerating `configFile.js`\n```js\nangular.module('myApp.config', [])\n.constant('string', \"overridden\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]})\n.constant('array', [\"one\",2,{\"three\":\"four\"},[5,\"six\"]])\n.constant('random', \"value\");\n\n```\n\n### <a id=\"options.createModule\"></a>options.createModule\nType: `Boolean` Default value: `true` Optional\n\nBy default, a new module is created with the name supplied. You can access an existing module, rather than creating one, by setting `createModule` to false.\n```javascript\ngulpNgConfig('myApp.config', {\n  createModule: false\n});\n```\n\nThis will produce `configFile.js` with an existing angular module\n```javascript\nangular.module('myApp.config')\n.constant('..', '..');\n```\n\n### <a id=\"options.wrap\"></a>options.wrap\nType: `Boolean` or `String` Default value: `false` Optional\n\nWrap the configuration module in an IIFE or your own wrapper.\n\n```js\ngulpNgConfig('myApp.config', {\n  wrap: true\n})\n```\n\nWill produce an IIFE wrapper for your configuration module:\n```javascript\n(function () {\n  return angular.module('myApp.config') // [] has been removed\n  .constant('..', '..');\n})();\n```\n\nYou can provide a custom wrapper. Provide any string you want, just make sure to include `<%= module %>` for where you want to embed the angular module.\n```js\ngulpNgConfig('myApp.config', {\n  wrap: 'define([\"angular\"], function () {\\n return <%= module %> \\n});'\n});\n```\n\nThe reuslting file will contain:\n```js\ndefine([\"angular\"], function () {\n return angular.module('myApp.config')\n.constant('..', '..');\n});\n```\n\n### <a id=\"options.parser\"></a>options.parser\nType: `String` Default value: 'json' Optional\n\nBy default, json file is used to generate the module. You can provide yml file to generate the module. Just set `parser` to `'yml'` or `'yaml'`. If your file type is yml and you have not defined `parser`, your file will still be parsed and js be generated correctly.\nFor example, you have a `config.yml` file,\n```yml\nstring: my string\ninteger: 12345\nobject:\n  one: 2\n  three:\n    - four\n```\n\n```javascript\ngulp.src(\"config.yml\")\ngulpNgConfig('myApp.config', {\n  parser: 'yml'\n});\n```\n\nGenerating,\n```js\nangular.module('myApp.config', [])\n.constant('string', \"my string\")\n.constant('integer', 12345)\n.constant('object', {\"one\":2,\"three\":[\"four\"]});\n```\n\n## Contributing\nContributions, issues, suggestions, and all other remarks are welcomed. To run locally just fork &amp; clone the project and run `npm install`. Before submitting a Pull Request, make sure that your changes pass `gulp test`, and if you are introducing or changing a feature, that you add/update any tests involved.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-ng-config@1.2.1",
  "_shasum": "b6083e6edc7e291b6e12ad2b2eb64c56d1352e5d",
  "_from": "gulp-ng-config@1.2.1",
  "_resolved": "https://registry.npmjs.org/gulp-ng-config/-/gulp-ng-config-1.2.1.tgz"
}
