/// <reference path="_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        'use strict';
        var RootController = (function () {
            function RootController($rootScope, $state, $uibModal, authService, shipsServiceUrls, shipsWebPaths, shipsViewPaths) {
                var _this = this;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$uibModal = $uibModal;
                this.authService = authService;
                this.shipsServiceUrls = shipsServiceUrls;
                this.shipsWebPaths = shipsWebPaths;
                this.shipsViewPaths = shipsViewPaths;
                this.redirectedToLogin = false;
                this.onNewUrlState = function (e, toState, toParams, fromState, fromParams) {
                    if (!_this.authService.authentication.isAuth
                        && !_this.redirectedToLogin
                        && toState.name != _this.shipsWebPaths.accountLogin.state
                        && toState.name != _this.shipsWebPaths.accountRegister.state) {
                        e.preventDefault();
                        _this.redirectToLogin();
                    }
                    else {
                        _this.showLogout = true;
                    }
                };
                $rootScope.controller = this;
                this.cofigureAuthService();
                this.configureUnauthenticatedRedirect($rootScope);
            }
            RootController.prototype.logOut = function () {
                this.authService.logOut();
                this.redirectToLogin();
            };
            RootController.prototype.errorMessage = function (message, time, errorList) {
                if (errorList === void 0) { errorList = null; }
                var modalInstance = this.$uibModal.open({
                    animation: true,
                    templateUrl: this.shipsViewPaths.error,
                    controller: 'errorController',
                    size: 'md',
                    resolve: {
                        message: function () {
                            return message;
                        },
                        time: function () {
                            return time;
                        },
                        errorList: function () {
                            return errorList ? errorList : [];
                        }
                    }
                });
            };
            RootController.prototype.hasRemoteTokenRequestFailed = function (rejection) {
                return rejection.status === 400
                    && rejection.config.url == this.shipsServiceUrls.authenticationServiceUrl
                    && this.$state.current.name != this.shipsWebPaths.accountLogin.state;
            };
            ;
            RootController.prototype.isPasswordSending = function (rejection) {
                return rejection.config.url == this.shipsServiceUrls.authenticationServiceUrl
                    && this.$state.current.name == this.shipsWebPaths.accountLogin.state;
            };
            RootController.prototype.redirectToLogin = function () {
                var _this = this;
                this.$state.go(this.shipsWebPaths.accountLogin.state);
                this.redirectedToLogin = true;
                setTimeout(function () {
                    _this.redirectedToLogin = false;
                }, 200);
            };
            RootController.prototype.cofigureAuthService = function () {
                this.authService.fillAuthData();
            };
            RootController.prototype.configureUnauthenticatedRedirect = function ($rootScope) {
                $rootScope.$on('$stateChangeStart', this.onNewUrlState);
            };
            return RootController;
        })();
        Web.RootController = RootController;
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            //TODO: find interface
            function configureLoadingBar(cfpLoadingBarProvider) {
                cfpLoadingBarProvider.includeSpinner = false;
            }
            Configurations.configureLoadingBar = configureLoadingBar;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function confugreInterceptoprs($httpProvider) {
                $httpProvider.interceptors.push(Web.Services.AuthInterceptorService.Factory);
                $httpProvider.interceptors.push(Web.Services.ErrorInterceptorService.Factory);
            }
            Configurations.confugreInterceptoprs = confugreInterceptoprs;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureRouting($stateProvider, $urlRouterProvider, $locationProvider, shipsWebPaths, shipsViewPaths, shipsServiceUrls) {
                $stateProvider.state(shipsWebPaths.home.state, {
                    url: shipsWebPaths.home.url,
                    controller: "homeController",
                    templateUrl: shipsViewPaths.home
                });
                $stateProvider.state(shipsWebPaths.game.state, {
                    url: shipsWebPaths.game.url,
                    controller: "gameController",
                    templateUrl: shipsViewPaths.game,
                    params: {
                        game_id: 0,
                        service_url: null
                    }
                });
                $stateProvider.state(shipsWebPaths.accountLogin.state, {
                    url: shipsWebPaths.accountLogin.url,
                    controller: "loginController",
                    templateUrl: shipsViewPaths.accountLogin
                });
                $stateProvider.state(shipsWebPaths.accountRegister.state, {
                    url: shipsWebPaths.accountRegister.url,
                    controller: "account.registerController",
                    templateUrl: shipsViewPaths.accountRegister
                });
                $urlRouterProvider.otherwise(shipsWebPaths.home.url);
                // use the HTML5 History API
                $locationProvider.html5Mode({
                    enabled: false,
                    requireBase: true
                });
            }
            Configurations.configureRouting = configureRouting;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Configurations;
        (function (Configurations) {
            'use strict';
            function configureLocalStorage(localStorageServiceProvider) {
                localStorageServiceProvider
                    .setPrefix('ships-web')
                    .setStorageType('localStorage');
            }
            Configurations.configureLocalStorage = configureLocalStorage;
        })(Configurations = Web.Configurations || (Web.Configurations = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Constants;
        (function (Constants) {
            'use strict';
            var UrlState = (function () {
                function UrlState() {
                }
                return UrlState;
            })();
            Constants.UrlState = UrlState;
            var ShipsWebPaths = (function () {
                function ShipsWebPaths() {
                    this.accountLogin = { url: '/login', state: 'login' };
                    this.accountRegister = { url: '/register', state: 'register' };
                    this.home = { url: '/home', state: 'home' };
                    this.game = { url: '/game/{game_id:int}/{service_url}', state: 'game' };
                }
                return ShipsWebPaths;
            })();
            Constants.ShipsWebPaths = ShipsWebPaths;
            var ShipsViewPaths = (function () {
                function ShipsViewPaths() {
                    this.shared = { modal: './views/shared/modalTemplate.html' };
                    this.accountLogin = './views/account/login.html';
                    this.accountRegister = './views/account/register.html';
                    this.home = './views/home.html';
                    this.error = './views/error.html';
                    this.invitationConfirm = './views/invitationConfirm.html';
                    this.gameCreate = './views/gameCreate.html';
                    this.game = './views/game.html';
                }
                return ShipsViewPaths;
            })();
            Constants.ShipsViewPaths = ShipsViewPaths;
            var SharedViewPaths = (function () {
                function SharedViewPaths() {
                }
                return SharedViewPaths;
            })();
            Constants.SharedViewPaths = SharedViewPaths;
        })(Constants = Web.Constants || (Web.Constants = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Constants;
        (function (Constants) {
            'use strict';
            var ShipsSettings = (function () {
                function ShipsSettings() {
                    this.clientId = '2261c0d1-3e69-4275-ad9a-3ab15bab0e3c';
                }
                return ShipsSettings;
            })();
            Constants.ShipsSettings = ShipsSettings;
        })(Constants = Web.Constants || (Web.Constants = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var ErrorController = (function () {
                function ErrorController($scope, $uibModalInstance, message, time, errorList) {
                    var _this = this;
                    this.$uibModalInstance = $uibModalInstance;
                    this.cancel = function () {
                        _this.$uibModalInstance.dismiss('cancel');
                    };
                    $scope.controller = this;
                    this.scheduleCancel(time);
                    this.model = new Web.Models.Misc.ErrorModel(message, errorList);
                }
                ErrorController.prototype.scheduleCancel = function (time) {
                    setTimeout(this.cancel, time);
                };
                ErrorController.$inject = ['$scope', '$uibModalInstance', 'message', 'time', 'errorList'];
                return ErrorController;
            })();
            Controllers.ErrorController = ErrorController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var IndexController = (function () {
                function IndexController($scope, $state, authService, shipsWebPaths) {
                    this.$scope = $scope;
                    this.$state = $state;
                    this.authService = authService;
                    this.shipsWebPaths = shipsWebPaths;
                    $scope.viewModel = this;
                    this.authentication = authService.authentication;
                }
                IndexController.prototype.redirectToLogin = function () {
                    this.authService.logOut();
                    this.$state.go(this.shipsWebPaths.accountLogin.state);
                };
                IndexController.$inject = ['$scope', '$state', 'authService', 'shipsWebPaths'];
                return IndexController;
            })();
            Controllers.IndexController = IndexController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginController = (function () {
                    function LoginController($scope, $state, authService, shipsWebPaths) {
                        var _this = this;
                        this.$scope = $scope;
                        this.$state = $state;
                        this.authService = authService;
                        this.shipsWebPaths = shipsWebPaths;
                        this.onLoginSucccess = function (response) {
                            _this.$state.go(_this.shipsWebPaths.home.state);
                        };
                        this.onLoginFail = function (response) {
                            if (response.data) {
                                _this.errorMessage = response.data.error;
                            }
                            _this.loginData.password = '';
                        };
                        $scope.controller = this;
                        this.errorMessage = "";
                        this.loginData = {
                            userName: "",
                            password: "",
                            rememberMe: ""
                        };
                        this.val = {
                            usernameMinLength: 3,
                            usernameMaxLength: 100,
                            passwordMinLength: 6,
                            passwordMaxLength: 100
                        };
                    }
                    LoginController.prototype.login = function () {
                        this.errorMessage = "";
                        if (this.$scope.loginForm.$valid) {
                            this.authService.login(this.loginData).then(this.onLoginSucccess, this.onLoginFail);
                        }
                        else {
                            this.loginForm.$submitted = true;
                        }
                    };
                    LoginController.$inject = ['$scope', '$state', 'authService', 'shipsWebPaths'];
                    return LoginController;
                })();
                Account.LoginController = LoginController;
            })(Account = Controllers.Account || (Controllers.Account = {}));
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            var Account;
            (function (Account) {
                'use strict';
                var RegisterController = (function () {
                    function RegisterController($scope, $state, authService, shipsWebPaths) {
                        var _this = this;
                        this.$scope = $scope;
                        this.$state = $state;
                        this.authService = authService;
                        this.shipsWebPaths = shipsWebPaths;
                        this.onRegisterSucccess = function (response) {
                            _this.$state.go(_this.shipsWebPaths.accountLogin.state);
                        };
                        this.onRegisterFail = function (response) {
                            if (response.data) {
                                _this.errorMessage = response.data.message;
                            }
                            _this.model.password = '';
                            _this.repeatPassword = '';
                        };
                        $scope.controller = this;
                        this.errorMessage = "";
                        this.model = {
                            username: "",
                            password: ""
                        };
                    }
                    RegisterController.prototype.register = function () {
                        this.errorMessage = "";
                        if (this.$scope.registerForm.$valid) {
                            this.authService.register(this.model).then(this.onRegisterSucccess, this.onRegisterFail);
                        }
                        else {
                            this.$scope.registerForm.$submitted = true;
                        }
                    };
                    RegisterController.$inject = ['$scope', '$state', 'authService', 'shipsWebPaths'];
                    return RegisterController;
                })();
                Account.RegisterController = RegisterController;
            })(Account = Controllers.Account || (Controllers.Account = {}));
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var HomeController = (function () {
                function HomeController($rootScope, $scope, $http, $state, shipsWebPaths, shipsServiceUrls, shipsViewPaths, Hub, $uibModal, hubService, authService) {
                    var _this = this;
                    this.$rootScope = $rootScope;
                    this.$scope = $scope;
                    this.$http = $http;
                    this.$state = $state;
                    this.shipsWebPaths = shipsWebPaths;
                    this.shipsServiceUrls = shipsServiceUrls;
                    this.shipsViewPaths = shipsViewPaths;
                    this.Hub = Hub;
                    this.$uibModal = $uibModal;
                    this.hubService = hubService;
                    this.authService = authService;
                    this.hasInvitedSomeone = false;
                    this.setUsersList = function (users) {
                        var currentUserName = _this.authService.authorizationData.getData().user_name;
                        for (var i in users) {
                            if (users[i].Name == currentUserName) {
                                users[i].Id = null;
                            }
                        }
                        _this.users = users;
                        _this.$scope.$apply();
                    };
                    this.handleInvitation = function (firstPlayer, firstLocaleId) {
                        var modalInstance = _this.$uibModal.open({
                            animation: true,
                            templateUrl: _this.shipsViewPaths.invitationConfirm,
                            controller: 'invitationConfirmController',
                            size: 'md',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: {
                                name: function () {
                                    return firstPlayer.Name;
                                }
                            }
                        });
                        modalInstance.result.then(function () {
                            _this.acceptInvitation(firstPlayer, firstLocaleId);
                        }, function () {
                            _this.usersHub.invoke('RejectInvitation', firstPlayer);
                        });
                    };
                    this.handleRejection = function (secondPlayer) {
                        _this.$rootScope.controller.errorMessage("Поканата към " + secondPlayer.Name + " беше отказана.", 10000);
                    };
                    this.startGame = function (gameId, otherPlayer, serviceUrl) {
                        var modalInstance = _this.$uibModal.open({
                            animation: true,
                            templateUrl: _this.shipsViewPaths.gameCreate,
                            controller: 'gameCreateController',
                            size: 'lg',
                            backdrop: 'static',
                            keyboard: false,
                            resolve: {
                                gameId: function () {
                                    return gameId;
                                },
                                serviceUrl: function () {
                                    return serviceUrl;
                                }
                            }
                        });
                    };
                    $scope.controller = this;
                    this.currentLocaleId = this.authService.authorizationData.getData().locale_id;
                    this.createUsersHub();
                }
                HomeController.prototype.createUsersHub = function () {
                    var _this = this;
                    this.usersHub = this.hubService.startHub("UsersListHub", {
                        rootPath: this.shipsServiceUrls.authenticationServiceUrl + "/signalr",
                        logging: false,
                        listeners: {
                            'setUsersList': this.setUsersList,
                            'handleInvitation': this.handleInvitation,
                            'handleRejection': this.handleRejection,
                            'startGame': this.startGame
                        },
                        methods: ['InvitePlayer', 'AcceptInvitation', 'RejectInvitation']
                    });
                    this.$scope.$on('$stateChangeStart', function () {
                        _this.usersHub.disconnect();
                    });
                };
                HomeController.prototype.invite = function (userId) {
                    var _this = this;
                    if (!this.hasInvitedSomeone) {
                        this.hasInvitedSomeone = true;
                        ;
                        this.usersHub.invoke('InvitePlayer', userId, this.currentLocaleId);
                        setTimeout(function () {
                            _this.hasInvitedSomeone = false;
                        }, 3000);
                    }
                };
                HomeController.prototype.acceptInvitation = function (otherPlayer, firstLocaleId) {
                    var _this = this;
                    this.createGame(otherPlayer.Id, this.authService.authorizationData.getData().user_id)
                        .then(function (result) {
                        var gameId = result.data;
                        _this.usersHub.invoke('AcceptInvitation', otherPlayer, gameId, firstLocaleId, _this.currentLocaleId);
                    });
                };
                HomeController.prototype.createGame = function (firstPlayerId, secondPlayerId) {
                    var model = {
                        first_player_id: firstPlayerId,
                        second_player_id: secondPlayerId
                    };
                    var url = this.getUrlFromCsList(this.authService.authorizationData.getData().locale_urls);
                    return this.$http.post(url + "/games", model);
                };
                HomeController.prototype.getUrlFromCsList = function (csUrls) {
                    var urls = csUrls.split(',');
                    var randomIdx = this.getRandomIntBetween(0, urls.length - 1);
                    return urls[randomIdx];
                };
                HomeController.prototype.getRandomIntBetween = function (min, max) {
                    var randValue = (Math.random() * (max - min + 1)) + "";
                    return parseInt(randValue, 10) + min;
                };
                HomeController.$inject = ['$rootScope', '$scope', '$http', '$state', 'shipsWebPaths', 'shipsServiceUrls', 'shipsViewPaths', 'Hub', '$uibModal', 'hubService', 'authService'];
                return HomeController;
            })();
            Controllers.HomeController = HomeController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var InvitationConfirmController = (function () {
                function InvitationConfirmController($scope, $uibModalInstance, name) {
                    this.$uibModalInstance = $uibModalInstance;
                    this.name = name;
                    $scope.controller = this;
                }
                InvitationConfirmController.prototype.cancel = function () {
                    this.$uibModalInstance.dismiss('cancel');
                };
                InvitationConfirmController.prototype.confirm = function () {
                    this.$uibModalInstance.close();
                };
                ;
                InvitationConfirmController.$inject = ['$scope', '$uibModalInstance', 'name'];
                return InvitationConfirmController;
            })();
            Controllers.InvitationConfirmController = InvitationConfirmController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var GameCreateController = (function () {
                function GameCreateController($scope, $http, $state, $uibModalInstance, authService, shipsWebPaths, gameId, serviceUrl) {
                    var _this = this;
                    this.$http = $http;
                    this.$state = $state;
                    this.$uibModalInstance = $uibModalInstance;
                    this.authService = authService;
                    this.shipsWebPaths = shipsWebPaths;
                    this.gameId = gameId;
                    this.serviceUrl = serviceUrl;
                    this.MIN_SHIP_LENGTH = 2;
                    this.MAX_SHIP_LENGTH = 4;
                    this.MATRIX_SIZE = 10;
                    this.POSITIONS_COUNT = 17;
                    this.shipsNextIdx = 1;
                    this.onCreateComplete = function () {
                        _this.$state.go(_this.shipsWebPaths.game.state, {
                            game_id: _this.gameId,
                            service_url: _this.serviceUrl
                        });
                    };
                    $scope.controller = this;
                    this.initBoard();
                    this.selectedCells = 0;
                    this.canAdd = false;
                    this.canComplete = false;
                    this.ships = [];
                    this.reset();
                }
                GameCreateController.prototype.addPosition = function (row, col) {
                    if (!this.canBeInShip(row, col)) {
                        return;
                    }
                    this.inProgress.positions.push({
                        x: col,
                        y: row
                    });
                    this.setBoard();
                };
                GameCreateController.prototype.removePosition = function (row, col) {
                    var removeAt = this.inProgress.positions.lastIndexOf({
                        x: col,
                        y: row
                    });
                    this.inProgress.positions.splice(removeAt, 1);
                    this.setBoard();
                };
                GameCreateController.prototype.addShip = function () {
                    if (!this.canAdd) {
                        return;
                    }
                    this.ships.push(this.inProgress);
                    this.reset();
                    this.setBoard();
                };
                GameCreateController.prototype.removeShip = function (shipIdx) {
                    for (var i in this.ships) {
                        if (this.ships[i].idx == shipIdx) {
                            this.ships.splice(i, 1);
                            break;
                        }
                    }
                    this.setBoard();
                };
                GameCreateController.prototype.canBeInShip = function (row, col) {
                    if (this.inProgress.positions.length < 1) {
                        return true;
                    }
                    if (this.inProgress.positions.length >= this.MAX_SHIP_LENGTH || this.selectedCells >= this.POSITIONS_COUNT || !this.areCoordsInBounds(row, col)) {
                        return false;
                    }
                    var moreThanOne = false;
                    if (this.inProgress.positions.length > 1) {
                        moreThanOne = true;
                    }
                    if (!this.isNextToAnyPosition(row, col) || moreThanOne && !this.isInSameDimension(row, col)) {
                        return false;
                    }
                    return true;
                };
                GameCreateController.prototype.confirm = function () {
                    if (!this.canComplete) {
                        return;
                    }
                    this.addShip();
                    var model = {
                        player_id: this.authService.authorizationData.getData().user_id,
                        ships: this.ships
                    };
                    this.$http.post(this.serviceUrl + "/games/" + this.gameId + "/ships", model)
                        .then(this.onCreateComplete);
                    this.$uibModalInstance.close();
                };
                GameCreateController.prototype.reset = function () {
                    this.inProgress = {
                        idx: this.shipsNextIdx++,
                        positions: []
                    };
                    this.setBoard();
                };
                GameCreateController.prototype.initBoard = function () {
                    this.board = [];
                    for (var i = 0; i < this.MATRIX_SIZE; i++) {
                        this.board[i + 0] = [];
                        for (var j = 0; j < this.MATRIX_SIZE; j++) {
                            this.board[i + 0][j + 0] = 0;
                        }
                    }
                };
                GameCreateController.prototype.isShipValid = function () {
                    var ship = this.inProgress;
                    if (ship.positions.length < this.MIN_SHIP_LENGTH || ship.positions.length > this.MAX_SHIP_LENGTH) {
                        return false;
                    }
                    if (this.getLongestDist(ship.positions) > ship.positions.length - 1) {
                        return false;
                    }
                    var firstPos = ship.positions[0];
                    for (var i in ship.positions) {
                        if (ship.positions[i].x != firstPos.x && ship.positions[i].y != firstPos.y) {
                            return false;
                        }
                    }
                    return true;
                };
                GameCreateController.prototype.getLongestDist = function (positions) {
                    var minX = 10, minY = 10, maxX = -1, maxY = -1;
                    for (var i in positions) {
                        if (minX > positions[i].x) {
                            minX = positions[i].x;
                        }
                        if (maxX > positions[i].x) {
                            maxX = positions[i].x;
                        }
                        if (minY > positions[i].y) {
                            minY = positions[i].y;
                        }
                        if (maxY > positions[i].y) {
                            maxY = positions[i].y;
                        }
                    }
                    return (maxX - minX) + (maxY - minY);
                };
                GameCreateController.prototype.areCoordsInBounds = function (row, col) {
                    return row < this.MATRIX_SIZE
                        && row >= 0
                        && col < this.MATRIX_SIZE
                        && col >= 0;
                };
                GameCreateController.prototype.isNextToAnyPosition = function (row, col) {
                    for (var i in this.inProgress.positions) {
                        var pos = this.inProgress.positions[i];
                        if (((row - pos.y) == 1 && (col - pos.x) == 0)
                            || ((row - pos.y) == -1 && (col - pos.x) == 0)
                            || ((row - pos.y) == 0 && (col - pos.x) == 1)
                            || ((row - pos.y) == 0 && (col - pos.x) == -1)) {
                            return true;
                        }
                    }
                    return false;
                };
                GameCreateController.prototype.isInSameDimension = function (row, col) {
                    var isHorizontal = this.inProgress.positions[0].y == this.inProgress.positions[1].y;
                    if (isHorizontal) {
                        return row == this.inProgress.positions[0].y;
                    }
                    else {
                        return col == this.inProgress.positions[0].x;
                    }
                };
                GameCreateController.prototype.setBoard = function () {
                    this.initBoard();
                    for (var i in this.ships) {
                        for (var idx in this.ships[i].positions) {
                            var pos = this.ships[i].positions[idx];
                            this.board[pos.y][pos.x] = this.ships[i].idx;
                        }
                    }
                    for (var idx in this.inProgress.positions) {
                        var pos = this.inProgress.positions[idx];
                        this.board[pos.y][pos.x] = -1;
                    }
                    this.selectedCells = this.inProgress.positions.length;
                    for (var i in this.ships) {
                        this.selectedCells += this.ships[i].positions.length;
                    }
                    this.canAdd = this.isShipValid();
                    this.canComplete = this.selectedCells == this.POSITIONS_COUNT;
                };
                GameCreateController.$inject = ['$scope', '$http', '$state', '$uibModalInstance', 'authService', 'shipsWebPaths', 'gameId', 'serviceUrl'];
                return GameCreateController;
            })();
            Controllers.GameCreateController = GameCreateController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Controllers;
        (function (Controllers) {
            'use strict';
            var GameController = (function () {
                function GameController($scope, $http, $state, $stateParams, authService, hubService, shipsWebPaths, Hub) {
                    var _this = this;
                    this.$scope = $scope;
                    this.$http = $http;
                    this.$state = $state;
                    this.$stateParams = $stateParams;
                    this.authService = authService;
                    this.hubService = hubService;
                    this.shipsWebPaths = shipsWebPaths;
                    this.Hub = Hub;
                    this.MATRIX_SIZE = 10;
                    this.POSITIONS_COUNT = 17;
                    this.wasAlertShown = false;
                    this.notify = function () {
                        _this.hub.invoke('Notify', _this.gameId);
                    };
                    this.handleNotification = function (gameId, playerNames) {
                        if (gameId == _this.gameId) {
                            _this.playerNames = playerNames;
                            _this.refreshGameDetails();
                        }
                    };
                    this.onDetailsResult = function (response) {
                        _this.game = response.data;
                        _this.setBoards();
                        if (_this.game.winner_player_id != null) {
                            var playerName;
                            if (_this.game.current_side.player.id == _this.game.winner_player_id) {
                                playerName = _this.game.current_side.player.name;
                            }
                            else {
                                playerName = _this.game.other_side.player.name;
                            }
                            if (!_this.wasAlertShown) {
                                alert(playerName + " won!");
                                _this.wasAlertShown = true;
                            }
                            _this.$state.go(_this.shipsWebPaths.home.state);
                        }
                    };
                    $scope.controller = this;
                    if (this.$stateParams["game_id"] == null || this.$stateParams["service_url"] == null) {
                        $state.go(shipsWebPaths.home.state);
                    }
                    this.serviceUrl = this.$stateParams["service_url"];
                    this.gameId = this.$stateParams["game_id"];
                    this.createHub();
                    this.refreshGameDetails();
                }
                GameController.prototype.createHub = function () {
                    var _this = this;
                    this.hub = this.hubService.startHub("GameHub", {
                        rootPath: this.serviceUrl + "/signalr",
                        logging: false,
                        listeners: {
                            'handleNotification': this.handleNotification
                        },
                        methods: ['Notify', 'RegisterConnection']
                    });
                    this.hub.connection.start()
                        .then(function () {
                        _this.hub.invoke('RegisterConnection', _this.gameId);
                    });
                    this.$scope.$on('$stateChangeStart', function () {
                        _this.hub.disconnect();
                    });
                };
                GameController.prototype.shoot = function (row, col) {
                    if (this.canShoot(row, col)) {
                        this.boardOther[row][col] = -1;
                        var data = {
                            x: col,
                            y: row,
                            player_id: this.authService.authorizationData.getData().user_id
                        };
                        this.$http.post(this.serviceUrl + "/games/" + this.gameId + "/shots", data)
                            .then(this.notify);
                    }
                };
                GameController.prototype.refreshGameDetails = function () {
                    this.$http.get(this.serviceUrl + "/games/" + this.gameId, {
                        params: {
                            user_id: this.authService.authorizationData.getData().user_id
                        }
                    }).then(this.onDetailsResult);
                };
                GameController.prototype.setBoards = function () {
                    this.initBoards();
                    this.setBoardSide(this.game.current_side, this.boardCurrent);
                    this.setBoardSide(this.game.other_side, this.boardOther);
                    this.setHits();
                    this.setCurrentTurn();
                };
                GameController.prototype.setBoardSide = function (side, board) {
                    if (side.ships != null) {
                        for (var i in side.ships) {
                            var ship = side.ships[i];
                            for (var idx in ship.positions) {
                                var pos = ship.positions[idx];
                                board[pos.y][pos.x] = parseInt(i) + 1;
                            }
                        }
                    }
                    for (var i in side.shots) {
                        var shot = side.shots[i];
                        if (shot.is_hit) {
                            board[shot.y][shot.x] = -1000;
                        }
                        else {
                            board[shot.y][shot.x] = -1;
                        }
                    }
                };
                GameController.prototype.initBoards = function () {
                    this.boardCurrent = [];
                    this.boardOther = [];
                    for (var i = 0; i < this.MATRIX_SIZE; i++) {
                        this.boardCurrent[i + 0] = [];
                        this.boardOther[i + 0] = [];
                        for (var j = 0; j < this.MATRIX_SIZE; j++) {
                            this.boardCurrent[i + 0][j + 0] = 0;
                            this.boardOther[i + 0][j + 0] = 0;
                        }
                    }
                };
                GameController.prototype.setHits = function () {
                    this.hitCurrent = this.getHitsCount(this.boardCurrent);
                    this.hitOther = this.getHitsCount(this.boardOther);
                };
                GameController.prototype.getHitsCount = function (board) {
                    var count = 0;
                    for (var i = 0; i < this.MATRIX_SIZE; i++) {
                        for (var j = 0; j < this.MATRIX_SIZE; j++) {
                            if (board[i][j] < -1) {
                                count++;
                            }
                        }
                    }
                    return count;
                };
                GameController.prototype.setCurrentTurn = function () {
                    this.isCurrentTurn = this.game.next_shot_player_id == this.game.current_side.player.id;
                };
                GameController.prototype.canShoot = function (row, col) {
                    return this.boardOther[row][col] == 0 && this.isCurrentTurn;
                };
                GameController.$inject = ['$scope', '$http', '$state', '$stateParams', 'authService', 'hubService', 'shipsWebPaths', 'Hub'];
                return GameController;
            })();
            Controllers.GameController = GameController;
        })(Controllers = Web.Controllers || (Web.Controllers = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Directives;
        (function (Directives) {
            'use strict';
            var ModalDirective = (function () {
                function ModalDirective(shipsViewPaths) {
                    var directive = {};
                    directive.restrict = 'E';
                    directive.replace = true;
                    directive.transclude = true;
                    directive.templateUrl = shipsViewPaths.shared.modal;
                    directive.link = function postLink(scope, element, attrs) {
                        scope.title = attrs.title;
                    };
                    return directive;
                }
                ModalDirective.$inject = ['shipsViewPaths'];
                return ModalDirective;
            })();
            Directives.ModalDirective = ModalDirective;
        })(Directives = Web.Directives || (Web.Directives = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Filters;
        (function (Filters) {
            'use strict';
            //TODO: refactor
            function stringFormat() {
                var s = arguments[0];
                for (var i = 0; i < arguments.length - 1; i++) {
                    var reg = new RegExp("\\{" + i + "\\}", "gm");
                    s = s.replace(reg, arguments[i + 1]);
                }
                return s;
            }
            Filters.stringFormat = stringFormat;
            ;
        })(Filters = Web.Filters || (Web.Filters = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Account;
            (function (Account) {
                'use strict';
                var LoginData = (function () {
                    function LoginData() {
                    }
                    return LoginData;
                })();
                Account.LoginData = LoginData;
                var UserCreateModel = (function () {
                    function UserCreateModel() {
                    }
                    return UserCreateModel;
                })();
                Account.UserCreateModel = UserCreateModel;
                var LoginValidation = (function () {
                    function LoginValidation() {
                    }
                    return LoginValidation;
                })();
                Account.LoginValidation = LoginValidation;
                var Authentication = (function () {
                    function Authentication() {
                    }
                    return Authentication;
                })();
                Account.Authentication = Authentication;
                var AuthorizedData = (function () {
                    function AuthorizedData() {
                    }
                    return AuthorizedData;
                })();
                Account.AuthorizedData = AuthorizedData;
                var UserListModel = (function () {
                    function UserListModel() {
                    }
                    return UserListModel;
                })();
                Account.UserListModel = UserListModel;
                var UserGameModel = (function () {
                    function UserGameModel() {
                    }
                    return UserGameModel;
                })();
                Account.UserGameModel = UserGameModel;
            })(Account = Models.Account || (Models.Account = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Misc;
            (function (Misc) {
                'use strict';
                var ErrorModel = (function () {
                    function ErrorModel(message, errorList) {
                        this.message = message;
                        this.errorList = errorList;
                    }
                    return ErrorModel;
                })();
                Misc.ErrorModel = ErrorModel;
            })(Misc = Models.Misc || (Models.Misc = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthInterceptorService = (function () {
                function AuthInterceptorService($q, $rootScope, $injector, localStorageService, shipsWebPaths) {
                    var _this = this;
                    this.$q = $q;
                    this.$rootScope = $rootScope;
                    this.$injector = $injector;
                    this.localStorageService = localStorageService;
                    this.shipsWebPaths = shipsWebPaths;
                    this.request = function (config) {
                        config.headers = config.headers || {};
                        var authData = _this.getAuthService().authorizationData.getData();
                        if (authData) {
                            config.headers['Authorization'] = 'Bearer ' + authData.access_token;
                        }
                        return config;
                    };
                    this.responseError = function (rejection) {
                        if (rejection.status === 401 || _this.$rootScope.controller.hasRemoteTokenRequestFailed(rejection)) {
                            _this.redirectToLogin();
                        }
                        return _this.$q.reject(rejection);
                    };
                }
                AuthInterceptorService.Factory = function ($q, $rootScope, $injector, localStorageService, shipsWebPaths) {
                    return new AuthInterceptorService($q, $rootScope, $injector, localStorageService, shipsWebPaths);
                };
                AuthInterceptorService.prototype.retryRequest = function (config, deferred) {
                    function successCallback(response) {
                        deferred.resolve(response);
                    }
                    function errorCallback(response) {
                        deferred.reject(response);
                    }
                    this.get$http()(config).then(successCallback, errorCallback);
                };
                AuthInterceptorService.prototype.redirectToLogin = function () {
                    this.get$state().go(this.shipsWebPaths.accountLogin.state);
                };
                AuthInterceptorService.prototype.get$http = function () {
                    return this.$injector.get('$http');
                };
                AuthInterceptorService.prototype.getAuthService = function () {
                    return this.$injector.get('authService');
                };
                AuthInterceptorService.prototype.get$state = function () {
                    return this.$injector.get('$state');
                };
                AuthInterceptorService.$inject = ['$q', '$rootScope', '$injector', 'localStorageService', 'shipsWebPaths'];
                AuthInterceptorService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthInterceptorService;
            })();
            Services.AuthInterceptorService = AuthInterceptorService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var AuthService = (function () {
                function AuthService($http, $q, localStorageService, shipsServiceUrls, shipsSettings) {
                    var _this = this;
                    this.$http = $http;
                    this.$q = $q;
                    this.localStorageService = localStorageService;
                    this.shipsServiceUrls = shipsServiceUrls;
                    this.shipsSettings = shipsSettings;
                    this.onLoginSuccess = function (response) {
                        response.user_name = _this.loginData.userName;
                        _this.authorizationData.setData(response);
                        _this.authentication.isAuth = true;
                        _this.authentication.userName = _this.loginData.userName;
                        _this.authentication.useRefreshTokens = false;
                        return response;
                    };
                    this.onLoginFail = function (response) {
                        _this.logOut();
                        return null;
                    };
                    this.authorizationData = new AuthorizationData(localStorageService);
                    this.authentication = new Web.Models.Account.Authentication();
                }
                AuthService.prototype.login = function (loginData) {
                    this.loginData = loginData;
                    var data = "grant_type=password&username=" + loginData.userName + "&password=" + loginData.password + "&client_id=" + this.shipsSettings.clientId;
                    return this.$http.post(this.shipsServiceUrls.authenticationServiceUrl, data, { headers: AuthService.TOKEN_HEADERS })
                        .success(this.onLoginSuccess)
                        .error(this.onLoginFail);
                };
                AuthService.prototype.register = function (user) {
                    return this.$http.post(this.shipsServiceUrls.authenticationServiceUrl + "/api/users", user);
                };
                AuthService.prototype.logOut = function () {
                    this.authorizationData.removeData();
                    this.authentication.isAuth = false;
                    this.authentication.userName = "";
                    this.authentication.useRefreshTokens = false;
                };
                AuthService.prototype.fillAuthData = function () {
                    var authData = this.authorizationData.getData();
                    if (authData) {
                        this.authentication.isAuth = true;
                        this.authentication.userName = authData.user_name;
                        this.authentication.useRefreshTokens = true;
                    }
                };
                AuthService.$inject = ['$http', '$q', 'localStorageService', 'shipsServiceUrls', 'shipsSettings'];
                AuthService.TOKEN_HEADERS = { 'Content-Type': 'application/x-www-form-urlencoded' };
                return AuthService;
            })();
            Services.AuthService = AuthService;
            var AuthorizationData = (function () {
                function AuthorizationData(localStorageService) {
                    this.localStorageService = localStorageService;
                }
                AuthorizationData.prototype.getData = function () {
                    return this.localStorageService.get(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.prototype.setData = function (data) {
                    this.localStorageService.set(AuthorizationData.AUTH_DATA_KEY, data);
                };
                AuthorizationData.prototype.removeData = function () {
                    this.localStorageService.remove(AuthorizationData.AUTH_DATA_KEY);
                };
                AuthorizationData.AUTH_DATA_KEY = 'authorizationData';
                return AuthorizationData;
            })();
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var HubService = (function () {
                function HubService($state, shipsWebPaths, authService, Hub) {
                    var _this = this;
                    this.$state = $state;
                    this.shipsWebPaths = shipsWebPaths;
                    this.authService = authService;
                    this.Hub = Hub;
                    this.hasConnectFailed = false;
                    this.onHubConnectSuccess = function (response) {
                        console.log('Now connected, connection ID=' + _this.hub.connection.id);
                    };
                    this.onHubConnectFail = function (promise) {
                        if (promise.context.status == 401) {
                            _this.redirectToLogin();
                        }
                        console.log('Could not connect');
                    };
                }
                HubService.prototype.startHub = function (hubName, options) {
                    var authData = this.authService.authorizationData.getData();
                    var accessToken = authData != null ? authData.access_token : null;
                    if (!options.queryParams) {
                        options.queryParams = {};
                    }
                    options.queryParams['access_token'] = "Bearer " + accessToken;
                    this.hub = new this.Hub(hubName, options);
                    this.createHub();
                    return this.hub;
                };
                HubService.prototype.createHub = function () {
                    this.hub.connect();
                    this.hub.connection.start()
                        .done(this.onHubConnectSuccess)
                        .fail(this.onHubConnectFail);
                };
                HubService.prototype.redirectToLogin = function () {
                    this.$state.go(this.shipsWebPaths.accountLogin.state);
                };
                HubService.$inject = ['$state', 'shipsWebPaths', 'authService', 'Hub'];
                return HubService;
            })();
            Services.HubService = HubService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Services;
        (function (Services) {
            'use strict';
            var ErrorInterceptorService = (function () {
                function ErrorInterceptorService($q, $rootScope) {
                    var _this = this;
                    this.$q = $q;
                    this.$rootScope = $rootScope;
                    this.responseError = function (errorResponse) {
                        switch (errorResponse.status) {
                            case 401:
                                break;
                            case 400:
                                if (!_this.$rootScope.controller.hasRemoteTokenRequestFailed(errorResponse)
                                    && !_this.$rootScope.controller.isPasswordSending(errorResponse)) {
                                    _this.handleBadRequest(errorResponse.data);
                                }
                                break;
                            case 409:
                                if (errorResponse.data) {
                                    var message = errorResponse.data.message;
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage(message, 12000, globalErrors);
                                    break;
                                }
                            case 403:
                            case 500:
                                if (errorResponse.data) {
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage(errorResponse.data.message, 6000);
                                    break;
                                }
                            default: {
                                if (errorResponse.status > 0 && errorResponse.data) {
                                    var globalErrors = _this.getGlobalErrors(errorResponse.data);
                                    _this.showMessage('Код ' + errorResponse.status + ': ' + errorResponse.data.message, 6000, globalErrors);
                                }
                                else {
                                    _this.showMessage(JSON.stringify(errorResponse), 6000);
                                }
                                ;
                            }
                        }
                        ;
                        return _this.$q.reject(errorResponse);
                    };
                }
                ErrorInterceptorService.Factory = function ($q, $rootScope) {
                    return new ErrorInterceptorService($q, $rootScope);
                };
                ErrorInterceptorService.prototype.handleBadRequest = function (badRequestResponse) {
                    var message = this.getMessage(badRequestResponse);
                    var globalErrors;
                    var badReq = badRequestResponse;
                    if (badReq.model_errors != null) {
                        globalErrors = this.getModelErrors(badReq);
                    }
                    else {
                        globalErrors = this.getGlobalErrors(badReq);
                    }
                    this.showMessage(message, 6000, globalErrors);
                };
                ErrorInterceptorService.prototype.showMessage = function (content, time, errorList) {
                    if (errorList === void 0) { errorList = null; }
                    this.$rootScope.controller.errorMessage(content, time, errorList);
                };
                ErrorInterceptorService.prototype.getMessage = function (badRequestResponse) {
                    if (badRequestResponse.message) {
                        return badRequestResponse.message;
                    }
                    else {
                        return undefined;
                    }
                };
                ErrorInterceptorService.prototype.getGlobalErrors = function (errorResponse) {
                    return errorResponse.errors;
                };
                ErrorInterceptorService.prototype.getModelErrors = function (badRequestResponse) {
                    if (badRequestResponse.model_errors && badRequestResponse.model_errors[""]) {
                        return badRequestResponse.model_errors[""].errors;
                    }
                    else {
                        return [];
                    }
                };
                ErrorInterceptorService.$inject = ['$q', '$rootScope'];
                return ErrorInterceptorService;
            })();
            Services.ErrorInterceptorService = ErrorInterceptorService;
        })(Services = Web.Services || (Web.Services = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

/// <reference path="../tools/typings/jquery/jquery.d.ts" />
/// <reference path="../tools/typings/angularjs/angular.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-bootstrap.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-ui-router.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-local-storage.d.ts" />
/// <reference path="../tools/typings/angularjs/angular-loading-bar.d.ts" />
/// <reference path="../tools/typings/ladda/ladda.d.ts" />
/// <reference path="../tools/typings/signalr/signalr.d.ts" />
/// <reference path="../tools/typings/angular-signalr-hub/angular-signalr-hub.d.ts" />
/// <reference path="../tools/typings/custom/serviceUrlConstants.d.ts" />
/// <reference path="app.ts" />
/// <reference path="rootController.ts" />
/// <reference path="configurations/applicationConfiguration.ts" />
/// <reference path="configurations/interceptorsConfiguration.ts" />
/// <reference path="configurations/routeConfiguration.ts" />
/// <reference path="configurations/storageConfiguration.ts" />
/// <reference path="constants/applicationConstants.ts" />
/// <reference path="constants/settingsConstants.ts" />
/// <reference path="controllers/errorController.ts" />
/// <reference path="controllers/indexController.ts" />
/// <reference path="controllers/account/loginController.ts" />
/// <reference path="controllers/account/registerController.ts" />
/// <reference path="controllers/homeController.ts" />
/// <reference path="controllers/invitationConfirmController.ts" />
/// <reference path="controllers/gameCreateController.ts" />
/// <reference path="controllers/gameController.ts" />
/// <reference path="directives/modalDirective.ts" />
/// <reference path="filters/stringFormat.ts" />
/// <reference path="models/account.ts" />
/// <reference path="models/misc.ts" />
/// <reference path="services/authInterceptorService.ts" />
/// <reference path="services/authService.ts" />
/// <reference path="services/hubService.ts" />
/// <reference path="services/errorInterceptorService.ts" /> 

/// <reference path="_all.ts" />
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        'use strict';
        var Configurations = Ships.Web.Configurations;
        var Constants = Ships.Web.Constants;
        var Controllers = Ships.Web.Controllers;
        var Directives = Ships.Web.Directives;
        var Filters = Ships.Web.Filters;
        var Services = Ships.Web.Services;
        var app = angular.module('ships-web', ['ui.router', 'LocalStorageModule', 'angular-loading-bar', 'ships-web-service-url', 'ui.bootstrap', 'ng-file-model', 'SignalR'])
            .constant('shipsWebPaths', new Constants.ShipsWebPaths())
            .constant('shipsViewPaths', new Constants.ShipsViewPaths())
            .constant('shipsSettings', new Constants.ShipsSettings())
            .directive('modal', function (shipsViewPaths) { return new Directives.ModalDirective(shipsViewPaths); })
            .filter('stringFormat', Filters.stringFormat)
            .service('authService', Services.AuthService)
            .service('hubService', Services.HubService)
            .controller("errorController", Controllers.ErrorController)
            .controller("homeController", Controllers.HomeController)
            .controller("invitationConfirmController", Controllers.InvitationConfirmController)
            .controller("gameCreateController", Controllers.GameCreateController)
            .controller("gameController", Controllers.GameController)
            .controller("indexController", Controllers.IndexController)
            .controller("loginController", Controllers.Account.LoginController)
            .controller("account.registerController", Controllers.Account.RegisterController)
            .config(['cfpLoadingBarProvider', Configurations.configureLoadingBar])
            .config(['$httpProvider', Configurations.confugreInterceptoprs])
            .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', 'shipsWebPaths', 'shipsViewPaths', 'shipsServiceUrls', Configurations.configureRouting])
            .config(['localStorageServiceProvider', Configurations.configureLocalStorage])
            .run(function ($rootScope, $state, $uibModal, authService, shipsServiceUrls, shipsWebPaths, shipsViewPaths) {
            return initialize($rootScope, $state, $uibModal, authService, shipsServiceUrls, shipsWebPaths, shipsViewPaths);
        });
        function initialize($rootScope, $state, $uibModal, authService, shipsServiceUrls, shipsWebPaths, shipsViewPaths) {
            $rootScope.controller = new Web.RootController($rootScope, $state, $uibModal, authService, shipsServiceUrls, shipsWebPaths, shipsViewPaths);
        }
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Error;
            (function (Error) {
                'use strict';
                var BaseApiError = (function () {
                    function BaseApiError() {
                    }
                    return BaseApiError;
                })();
                Error.BaseApiError = BaseApiError;
                var BadRequestApiError = (function (_super) {
                    __extends(BadRequestApiError, _super);
                    function BadRequestApiError() {
                        _super.apply(this, arguments);
                    }
                    return BadRequestApiError;
                })(BaseApiError);
                Error.BadRequestApiError = BadRequestApiError;
                var AuthError = (function () {
                    function AuthError() {
                    }
                    return AuthError;
                })();
                Error.AuthError = AuthError;
                var BadRequest = (function () {
                    function BadRequest() {
                    }
                    return BadRequest;
                })();
            })(Error = Models.Error || (Models.Error = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Ships;
(function (Ships) {
    var Web;
    (function (Web) {
        var Models;
        (function (Models) {
            var Game;
            (function (Game) {
                'use strict';
                var CreateModel = (function () {
                    function CreateModel() {
                    }
                    return CreateModel;
                })();
                Game.CreateModel = CreateModel;
                var GameSetupCreateModel = (function () {
                    function GameSetupCreateModel() {
                    }
                    return GameSetupCreateModel;
                })();
                Game.GameSetupCreateModel = GameSetupCreateModel;
                var ShipModel = (function () {
                    function ShipModel() {
                    }
                    return ShipModel;
                })();
                Game.ShipModel = ShipModel;
                var PositionModel = (function () {
                    function PositionModel() {
                    }
                    return PositionModel;
                })();
                Game.PositionModel = PositionModel;
                var GameDetailsModel = (function () {
                    function GameDetailsModel() {
                    }
                    return GameDetailsModel;
                })();
                Game.GameDetailsModel = GameDetailsModel;
                var GameSideModel = (function () {
                    function GameSideModel() {
                    }
                    return GameSideModel;
                })();
                Game.GameSideModel = GameSideModel;
                var ShotModel = (function (_super) {
                    __extends(ShotModel, _super);
                    function ShotModel() {
                        _super.apply(this, arguments);
                    }
                    return ShotModel;
                })(PositionModel);
                Game.ShotModel = ShotModel;
                var ShotCreateModel = (function (_super) {
                    __extends(ShotCreateModel, _super);
                    function ShotCreateModel() {
                        _super.apply(this, arguments);
                    }
                    return ShotCreateModel;
                })(PositionModel);
                Game.ShotCreateModel = ShotCreateModel;
            })(Game = Models.Game || (Models.Game = {}));
        })(Models = Web.Models || (Web.Models = {}));
    })(Web = Ships.Web || (Ships.Web = {}));
})(Ships || (Ships = {}));

//# sourceMappingURL=app.min.js.map
